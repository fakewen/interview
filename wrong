class Solution {
 public:
 class mycom{
  public://!!!!!!
   int operator()(pair<int,int>& n1,pair<int,int>& n2){
     return (n1.first<n2.first)?1:(n1.first==n2.first)?(n1.second>n2.second):-1;
   }
 };
  int helper(vector<int>& ans,int curV){//if ALL<tar
    int l=0,r=ans.size()-1;
    while((l+1)<r){//1+1<3
      int mid=l+(r-l)/2;
      if(curV<=ans[mid]){
        r=mid;
      }else{
        l=mid+1;
      }
    }
    if(ans[l]>=curV)return l;
    else if(ans[r]>=curV)return r;
    else return -1;
  }
  int largest(vector<pair<int, int> > points) {
    int len=points.size();
    if(len<2)return 0;
    sort(points.begin(),points.end(),mycom());
    //find longest asscending sequence in y
    vector<int> ans;
    for(auto it:points){
      int curV=it.second;
      if(ans.empty()){
        ans.push_back(curV);
      }else{
        //find the first place val>=curV
        int l=0,r=ans.size()-1;
    while((l+1)<r){//1+1<3
      int mid=l+(r-l)/2;
      if(curV<=ans[mid]){
        r=mid;
      }else{
        l=mid+1;
      }
    }
    if(ans[l]>=curV)ans[l]=curV;
    else if(ans[r]>=curV)ans[r]=curV;
    else ans.push_back(curV);
      }
    }
    return (ans.size()<=1)?0:ans.size();
  }
};
